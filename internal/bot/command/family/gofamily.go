package family

import (
	"famoria/internal/bot/callback"
	"famoria/internal/database/mongo/repositories/brak"
	"famoria/internal/pkg/html"
	"fmt"
	"github.com/koliy82/telego"
	tu "github.com/koliy82/telego/telegoutil"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.uber.org/zap"
	"time"
)

type goFamily struct {
	cm       *callback.CallbacksManager
	brakRepo brak.Repository
	log      *zap.Logger
}

func (g goFamily) Handle(bot *telego.Bot, update telego.Update) {
	fUser := update.Message.From
	reply := update.Message.ReplyToMessage

	params := &telego.SendMessageParams{
		ChatID:    tu.ID(update.Message.Chat.ID),
		ParseMode: telego.ModeHTML,
		ReplyParameters: &telego.ReplyParameters{
			MessageID:                update.Message.GetMessageID(),
			AllowSendingWithoutReply: true,
		},
	}

	if reply == nil {
		_, err := bot.SendMessage(params.
			WithText(fmt.Sprintf(
				"%s, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞. üòòüí¨",
				html.UserMention(fUser),
			)))
		if err != nil {
			g.log.Sugar().Error(err)
		}
		return
	}

	tUser := reply.From
	if tUser.ID == fUser.ID {
		_, err := bot.SendMessage(params.WithText(fmt.Sprintf(
			"%s, –±—Ä–∞–∫ —Å —Å–æ–±–æ–π –Ω–µ–ª—å–∑—è, –ø—Ä–∏–¥—ë—Ç—Å—è –∏—Å–∫–∞—Ç—å –ø–∞—Ä—É. üò•",
			html.UserMention(fUser),
		)))
		if err != nil {
			g.log.Sugar().Error(err)
		}
		return
	}

	if tUser.IsBot {
		_, err := bot.SendMessage(params.WithText(fmt.Sprintf(
			"%s, –±–æ—Ç–∞ –Ω–µ —Ç—Ä–æ–≥–∞–π. üëø",
			html.UserMention(fUser),
		)))
		if err != nil {
			g.log.Sugar().Error(err)
		}
		return
	}

	fBrakCount, _ := g.brakRepo.Count(bson.M{"$or": []interface{}{
		bson.M{"first_user_id": fUser.ID},
		bson.M{"second_user_id": fUser.ID},
	}})
	if fBrakCount != 0 {
		_, err := bot.SendMessage(params.WithText(fmt.Sprintf(
			"%s, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–∞–∫! üíç",
			html.UserMention(fUser),
		)))
		if err != nil {
			g.log.Sugar().Error(err)
		}
		return
	}

	tBrakCount, _ := g.brakRepo.Count(bson.M{"$or": []interface{}{
		bson.M{"first_user_id": tUser.ID},
		bson.M{"second_user_id": tUser.ID},
	}})
	if tBrakCount != 0 {
		_, err := bot.SendMessage(params.WithText(fmt.Sprintf(
			"%s, —É –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —É–∂–µ –µ—Å—Ç—å –±—Ä–∞–∫! üíç",
			html.UserMention(fUser),
		)))
		if err != nil {
			g.log.Sugar().Error(err)
		}
		return
	}

	yesCallback := g.cm.DynamicCallback(callback.DynamicOpts{
		Label:    "–î–∞!‚ù§Ô∏è‚Äçüî•",
		CtxType:  callback.ChooseOne,
		OwnerIDs: []int64{tUser.ID},
		Time:     time.Duration(60) * time.Minute,
		Callback: func(query telego.CallbackQuery) {
			_ = g.brakRepo.Insert(&brak.Brak{
				OID:          primitive.NewObjectID(),
				ChatID:       update.Message.Chat.ID,
				FirstUserID:  fUser.ID,
				SecondUserID: tUser.ID,
				CreateDate:   time.Now(),
				Score:        0,
			})

			_, err := bot.SendMessage(&telego.SendMessageParams{
				ChatID:    tu.ID(update.Message.Chat.ID),
				ParseMode: telego.ModeHTML,
				Text: fmt.Sprintf(
					"–í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è\n%s –∏ %s —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µ ‚ù§Ô∏è‚Äçüî•",
					html.UserMention(fUser), html.UserMention(tUser),
				),
				ReplyParameters: &telego.ReplyParameters{
					MessageID: query.Message.GetMessageID(),
				},
			})
			if err != nil {
				g.log.Sugar().Error(err)
			}
		},
	})

	noCallback := g.cm.DynamicCallback(callback.DynamicOpts{
		Label:      "–ù–µ—Ç!üíî",
		CtxType:    callback.ChooseOne,
		OwnerIDs:   []int64{tUser.ID},
		Time:       time.Duration(60) * time.Minute,
		AnswerText: "–û—Ç–∫–∞–∑ üñ§",
		Callback: func(query telego.CallbackQuery) {
			_, err := bot.SendMessage(&telego.SendMessageParams{
				ChatID: tu.ID(update.Message.Chat.ID),
				Text:   "–û—Ç–∫–∞–∑ üñ§",
				ReplyParameters: &telego.ReplyParameters{
					MessageID: query.Message.GetMessageID(),
				},
			})
			if err != nil {
				g.log.Sugar().Error(err)
				return
			}
		},
	})

	_, err := bot.SendMessage(params.WithText(fmt.Sprintf(
		"üíç %s, –º–∏–Ω—É—Ç–æ—á–∫—É –≤–Ω–∏–º–∞–Ω–∏—è.\n"+
			"üíñ %s —Å–¥–µ–ª–∞–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞.",
		html.UserMention(tUser), html.UserMention(fUser),
	)).WithReplyMarkup(tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			yesCallback.Inline(),
			noCallback.Inline(),
		),
	)))
	if err != nil {
		g.log.Sugar().Error(err)
	}

}
