package family

import (
	"fmt"
	"github.com/mymmrac/telego"
	tu "github.com/mymmrac/telego/telegoutil"
	"go.mongodb.org/mongo-driver/bson"
	"go.uber.org/zap"
	"go_tg_bot/internal/bot/callback"
	"go_tg_bot/internal/database/mongo/repositories/brak"
	"go_tg_bot/internal/database/mongo/repositories/user"
	"go_tg_bot/internal/pkg/html"
	"time"
)

type goKid struct {
	cm       *callback.CallbacksManager
	brakRepo brak.Repository
	userRepo user.Repository
	log      *zap.Logger
}

func (g goKid) Handle(bot *telego.Bot, update telego.Update) {
	from := update.Message.From
	reply := update.Message.ReplyToMessage

	params := &telego.SendMessageParams{
		ChatID:    tu.ID(update.Message.Chat.ID),
		ParseMode: telego.ModeHTML,
		ReplyParameters: &telego.ReplyParameters{
			MessageID:                update.Message.GetMessageID(),
			AllowSendingWithoutReply: true,
		},
	}

	if reply == nil {
		_, _ = bot.SendMessage(params.WithText(
			fmt.Sprintf("%s, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞.", html.UserMention(from))),
		)
		return
	}

	b, _ := g.brakRepo.FindByUserID(from.ID)

	if b == nil {
		_, _ = bot.SendMessage(params.WithText(
			fmt.Sprintf("%s, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –±—Ä–∞–∫–µ. üò•", html.UserMention(from))),
		)
		return
	}

	if b.BabyUserID != nil {
		_, _ = bot.SendMessage(params.WithText(
			fmt.Sprintf("%s, –≤ –≤–∞—à–µ–º –±—Ä–∞–∫–µ —É–∂–µ —Ä–æ–∂–¥—ë–Ω —Ä–µ–±—ë–Ω–æ–∫.", html.UserMention(from))),
		)
		return
	}

	tUser := reply.From

	if tUser.ID == from.ID || tUser.ID == b.FirstUserID || tUser.ID == b.SecondUserID {
		_, err := bot.SendMessage(params.WithText(
			fmt.Sprintf("%s, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å —Å–≤–æ–∏–º –∂–µ —Ä–µ–±—ë–Ω–∫–æ–º –∏–ª–∏ —Ä–æ–¥–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞.", html.UserMention(from))),
		)
		if err != nil {
			g.log.Sugar().Error(err)
		}
		return
	}

	if tUser.IsBot {
		_, _ = bot.SendMessage(params.WithText(
			fmt.Sprintf("%s, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–±—ë–Ω–∫–æ–º.", html.UserMention(from))),
		)
		return
	}

	kidBrakCount, _ := g.brakRepo.Count(bson.M{"baby_user_id": tUser.ID})
	if kidBrakCount != 0 {
		_, _ = bot.SendMessage(params.WithDisableNotification().WithText(
			fmt.Sprintf("%s —É–∂–µ —Ä–æ–¥–∏–ª—Å—è —É –∫–æ–≥–æ-—Ç–æ –≤ –±—Ä–∞–∫–µ. üò•", html.UserMention(tUser))),
		)
		return
	}

	if time.Now().Unix() < b.CreateDate.Add(7*24*time.Hour).Unix() {
		_, _ = bot.SendMessage(params.WithText(
			fmt.Sprintf("%s, –¥–ª—è —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∂–µ–Ω–∞—Ç—ã –Ω–µ–¥–µ–ª—é. ‚åö", html.UserMention(from))),
		)
		return
	}

	sUser, _ := g.userRepo.FindByID(b.PartnerID(from.ID))

	if sUser == nil {
		_, _ = bot.SendMessage(params.WithText(
			fmt.Sprintf("%s, –≤–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. üò•", html.UserMention(from))),
		)
		return
	}

	yesCallback := g.cm.DynamicCallback(callback.DynamicOpts{
		Label:    "–†–æ–¥–∏—Ç—å—Å—è! ü§±üèª",
		CtxType:  callback.ChooseOne,
		OwnerIDs: []int64{tUser.ID},
		Time:     time.Duration(60) * time.Minute,
		Callback: func(query telego.CallbackQuery) {
			err := g.brakRepo.Update(
				bson.M{"_id": b.OID},
				bson.M{"$set": bson.D{
					{"baby_user_id", tUser.ID},
					{"baby_create_date", time.Now()},
				}},
			)
			if err != nil {
				g.log.Sugar().Error(err)
				return
			}
			_, _ = bot.SendMessage(params.
				WithText(fmt.Sprintf("–í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è\n%s —Ä–æ–¥–∏–ª—Å—è —É %s –∏ %s. ü§±",
					html.UserMention(tUser), html.UserMention(from), sUser.Mention())).
				WithReplyMarkup(nil),
			)
		},
	})

	noCallback := g.cm.DynamicCallback(callback.DynamicOpts{
		Label:    "–í—ã–∫–∏–¥—ã—à! üò∂‚Äçüå´Ô∏è",
		CtxType:  callback.ChooseOne,
		OwnerIDs: []int64{tUser.ID},
		Time:     time.Duration(60) * time.Minute,
		Callback: func(query telego.CallbackQuery) {
			_, _ = bot.SendMessage(params.
				WithText(fmt.Sprintf("%s –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ—è–≤–ª—è—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Å–≤–µ—Ç. üíÄ", html.UserMention(tUser))).
				WithReplyMarkup(nil),
			)
		},
	})

	_, _ = bot.SendMessage(params.
		WithText(fmt.Sprintf("%s, —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ä–æ–¥–∏—Ç—å—Å—è –≤ —Å–µ–º—å–µ %s –∏ %s. üè†",
			html.UserMention(tUser), html.UserMention(from), sUser.Mention())).
		WithReplyMarkup(tu.InlineKeyboard(
			tu.InlineKeyboardRow(yesCallback.Inline(), noCallback.Inline()),
		)),
	)

}
